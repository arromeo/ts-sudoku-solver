{"version":3,"sources":["utils/blockHelpers.ts","components/cell.tsx","SudokuSolver/BoardHistory.ts","SudokuSolver/Board.ts","SudokuSolver/SolveMatrix.ts","SudokuSolver/SudokuSolver.ts","components/board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blockToRow","block","position","Math","floor","blockToColumn","positionToBlock","row","column","Cell","props","classList","valid","react_default","a","createElement","type","className","value","onChange","onchange","BoardHistory","Object","classCallCheck","this","history","createClass","key","item","push","historyItems","_this","forEach","add","length","pop","filter","ghost","Board","fill","board","i","j","score","cell","result","join","toString","SudokuBoard","_Board","possibleConstructorReturn","getPrototypeOf","call","inherits","boardType","PossibilityBoard","_Board2","SolveMatrix","matrix","BlockHelpers","remove","boardTypes","maxSolutions","boardNumber","iType","iOuter","hits","iInner","unitType","unitValue","solutions","validCell","SudokuSolver","mainBoard","boardHistory","solveMatrix","status","totalRuns","input","rowArr","newValue","parseInt","includes","merge","populateBoard","nextItem","getSolvableItem","undefined","BlockHelper","Error","action","get","console","log","initialState","List","invalid","Map","Set","isValid","errorMessage","InputBoard","_React$Component","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","concat","state","event","_this2","validCharacters","target","charAt","setState","_ref","set","updateValidation","preventDefault","solved","solve","toJS","fromJS","_this3","clueTotal","_loop","indexOf","_ref2","_loop2","columnArr","testValue","_ref3","_loop3","blockArr","_ref4","_this4","onSubmit","e","handleSubmit","map","rowNumber","columnNumber","isCellValid","handleChange","disabled","onClick","handleClear","href","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAAO,SAASA,EAAWC,EAAeC,GACxC,OAA+B,EAAxBC,KAAKC,MAAMH,EAAQ,GAASE,KAAKC,MAAMF,EAAW,GAGpD,SAASG,EAAcJ,EAAeC,GAC3C,OAAQD,EAAQ,EAAK,EAAKC,EAAW,EAGhC,SAASI,EAAgBC,EAAaC,GAC3C,OAA6B,EAAtBL,KAAKC,MAAMG,EAAM,GAASJ,KAAKC,MAAMI,EAAS,GCGhD,IAkBQC,EAlByC,SAAAC,GAEtD,IAAMC,EACJ,QACkB,IAAjBD,EAAMF,QAAiC,IAAjBE,EAAMF,OAAe,gBAAkB,KAC/C,IAAdE,EAAMH,KAA2B,IAAdG,EAAMH,IAAY,iBAAmB,KACvDG,EAAME,MAAqB,GAAb,YAElB,OACEC,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,UAAWN,EACXO,MAAOR,EAAMQ,MACbC,SAAUT,EAAMU,YCTTC,EAAb,WAGE,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAFPC,aAEM,EACZD,KAAKC,QAAU,GAJnB,OAAAH,OAAAI,EAAA,EAAAJ,CAAAD,EAAA,EAAAM,IAAA,MAAAT,MAAA,SAQaU,GACTJ,KAAKC,QAAQI,KAAKD,KATtB,CAAAD,IAAA,QAAAT,MAAA,SAaeY,GAA6B,IAAAC,EAAAP,KACxCM,EAAaE,QAAQ,SAAAJ,GAAI,OAAIG,EAAKE,IAAIL,OAd1C,CAAAD,IAAA,SAAAT,MAAA,WAmBI,OAAOM,KAAKC,QAAQS,SAnBxB,CAAAP,IAAA,MAAAT,MAAA,WAwBI,OAAOM,KAAKC,QAAQU,QAxBxB,CAAAR,IAAA,aAAAT,MAAA,WA4BI,OAAOM,KAAKC,QAAQW,OAAO,SAAAR,GACzB,OAAsB,IAAfA,EAAKS,QACXH,WA9BPb,EAAA,GCdeiB,aAGb,SAAAA,EAAYC,GAAejB,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,GAAAd,KAFpBgB,WAEmB,EACxBhB,KAAKgB,MAAQ,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BjB,KAAKgB,MAAMX,KAAK,IAChB,IAAK,IAAIa,EAAI,EAAGA,EAAI,EAAGA,IACrBlB,KAAKgB,MAAMC,GAAGZ,KAAKU,wDASvB,IAAII,EAAQ,EAOZ,OANAnB,KAAKgB,MAAMR,QAAQ,SAAAzB,GACjBA,EAAIyB,QAAQ,SAAAY,GACVD,GAASC,MAIND,kCAIP,IAAIE,EAAS,GAKb,OAJArB,KAAKgB,MAAMR,QAAQ,SAAAzB,GACjBsC,GAAUtC,EAAIuC,KAAK,IAAM,OAGpBD,qCAKP,IADA,IAAMA,EAAS,GACNtC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChCsC,EAAOhB,KAAK,IACZ,IAAK,IAAIrB,EAAS,EAAGA,EAAS,EAAGA,IAC/BqC,EAAOtC,GAAKsB,KAAKL,KAAKgB,MAAMjC,GAAKC,GAAQuC,YAI7C,OAAOF,WAIEG,EAAb,SAAAC,GACE,SAAAD,IAAe,OAAA1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,GAAA1B,OAAA4B,EAAA,EAAA5B,CAAAE,KAAAF,OAAA6B,EAAA,EAAA7B,CAAA0B,GAAAI,KAAA5B,KACP,IAFV,OAAAF,OAAA+B,EAAA,EAAA/B,CAAA0B,EAAAC,GAAA3B,OAAAI,EAAA,EAAAJ,CAAA0B,EAAA,EAAArB,IAAA,MAAAT,MAAA,SAMaX,EAAaC,EAAgBU,GACtC,GAAgC,IAA5BM,KAAKgB,MAAMjC,GAAKC,GAElB,OADAgB,KAAKgB,MAAMjC,GAAKC,GAAUU,EACnB,CACLX,IAAKA,EACLC,OAAQA,EACRU,MAAOA,EACPoC,UAAW,OACXjB,OAAO,KAdf,CAAAV,IAAA,SAAAT,MAAA,SAoBgBX,EAAaC,GACzBgB,KAAKgB,MAAMjC,GAAKC,GAAU,MArB9BwC,EAAA,CAAiCV,GAyBpBiB,EAAb,SAAAC,GACE,SAAAD,IAAe,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAAjC,OAAA4B,EAAA,EAAA5B,CAAAE,KAAAF,OAAA6B,EAAA,EAAA7B,CAAAiC,GAAAH,KAAA5B,KACP,IAFV,OAAAF,OAAA+B,EAAA,EAAA/B,CAAAiC,EAAAC,GAAAlC,OAAAI,EAAA,EAAAJ,CAAAiC,EAAA,EAAA5B,IAAA,MAAAT,MAAA,SAMaX,EAAaC,EAAgBU,GACtC,OAAgC,IAA5BM,KAAKgB,MAAMjC,GAAKC,IAClBgB,KAAKgB,MAAMjC,GAAKC,GAAU,EACnB,CACLD,IAAKA,EACLC,OAAQA,EACRU,MAAOA,EACPoC,UAAW,cACXjB,OAAO,SAGT,IAjBN,CAAAV,IAAA,SAAAT,MAAA,SAsBgBX,EAAaC,GACzBgB,KAAKgB,MAAMjC,GAAKC,GAAU,MAvB9B+C,EAAA,CAAsCjB,GC/DzBmB,EAAb,WAGE,SAAAA,IAAenC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,GAAAjC,KAFRkC,YAEO,EACZlC,KAAKkC,OAAS,GACd,IAAK,IAAIjB,EAAI,EAAGA,EAAI,EAAGA,IACrBjB,KAAKkC,OAAO7B,KAAK,IAAI0B,GAN3B,OAAAjC,OAAAI,EAAA,EAAAJ,CAAAmC,EAAA,EAAA9B,IAAA,MAAAT,MAAA,SAUaX,EAAaC,EAAgBU,GAOtC,IANA,IAGI2B,EAHEpB,EAAyB,GACzBxB,EAAQ0D,EAA6BpD,EAAKC,GAKvCiC,EAAI,EAAGA,EAAI,EAAGA,KACrBI,EAASrB,KAAKkC,OAAOjB,GAAGR,IAAI1B,EAAKC,EAAQiC,KAC/BhB,EAAQI,KAAKgB,IAEvBA,EAASrB,KAAKkC,OAAOxC,GAAOe,IAAI1B,EAAKkC,EAAGvB,KAC9BO,EAAQI,KAAKgB,IAEvBA,EAASrB,KAAKkC,OAAOxC,GAAOe,IAAIQ,EAAGjC,EAAQU,KACjCO,EAAQI,KAAKgB,IAEvBA,EAASrB,KAAKkC,OAAOxC,GAAOe,IAC1B0B,EAAwB1D,EAAOwC,GAC/BkB,EAA2B1D,EAAOwC,GAClCvB,KAEQO,EAAQI,KAAKgB,GAGzB,OAAOpB,IAnCX,CAAAE,IAAA,SAAAT,MAAA,SAsCgBX,EAAaC,EAAgBU,GACzCM,KAAKkC,OAAOxC,GAAO0C,OAAOrD,EAAKC,KAvCnC,CAAAmB,IAAA,kBAAAT,MAAA,WA6CI,IAFA,IACIX,EAAaC,EADXqD,EAA0B,CAAC,MAAO,SAAU,SAEzCC,EAAe,EAAGA,EAAe,EAAGA,IAC3C,IAAK,IAAIC,EAAc,EAAGA,EAAc,EAAGA,IACzC,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,EAAGA,IAE7B,IADA,IAAIhD,EAAkB6C,EAAWG,GACxBC,EAAS,EAAGA,EAAS,EAAGA,IAAU,CAEzC,IADA,IAAIC,EAAiB,GACZC,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACzC,OAAQnD,GACN,IAAK,MACHT,EAAM0D,EACNzD,EAAS2D,EACT,MACF,IAAK,SACH5D,EAAM4D,EACN3D,EAASyD,EACT,MACF,IAAK,QACH1D,EAAMoD,EAAwBM,EAAQE,GACtC3D,EAASmD,EAA2BM,EAAQE,GAGhD,GAAoD,IAAhD3C,KAAKkC,OAAOK,GAAavB,MAAMjC,GAAKC,KACtC0D,EAAKrC,KAAKsC,GACND,EAAKhC,OAAS4B,GAChB,MAKN,GAAII,EAAKhC,SAAW4B,EAClB,MAAO,CACL5C,MAAO6C,EACPK,SAAUpD,EACVqD,UAAWJ,EACXK,UAAWJ,QA/E3BT,EAAA,GCPMc,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE9BC,EAAb,WAOE,SAAAA,IAAelD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,GAAAhD,KANPiD,eAMM,EAAAjD,KALNkD,kBAKM,EAAAlD,KAJNmD,iBAIM,EAAAnD,KAHNoD,YAGM,EAAApD,KAFNqD,eAEM,EACZrD,KAAKiD,UAAY,IAAIzB,EACrBxB,KAAKkD,aAAe,IAAIrD,EACxBG,KAAKmD,YAAc,IAAIlB,EACvBjC,KAAKoD,OAAS,UACdpD,KAAKqD,UAAY,EAZrB,OAAAvD,OAAAI,EAAA,EAAAJ,CAAAkD,EAAA,EAAA7C,IAAA,gBAAAT,MAAA,SAewB4D,GAAyB,IAAA/C,EAAAP,KAC7CsD,EAAM9C,QAAQ,SAAC+C,EAAQxE,GACrBwE,EAAO/C,QAAQ,SAACd,EAAOV,GACrB,IAAIwE,EAAmBC,SAAS/D,GAC5BqD,EAAUW,SAASF,KACrBjD,EAAK2C,aAAaS,MAAMpD,EAAK4C,YAAY1C,IAAI1B,EAAKC,EAAQwE,EAAW,IACrEjD,EAAK2C,aAAazC,IAAIF,EAAK0C,UAAUxC,IAAI1B,EAAKC,EAAQwE,WArBhE,CAAArD,IAAA,QAAAT,MAAA,SA2Be4D,GAEX,IADAtD,KAAK4D,cAAcN,GACI,YAAhBtD,KAAKoD,QAAwC,aAAhBpD,KAAKoD,QACvC,GAAoB,YAAhBpD,KAAKoD,OAAsB,CAC7B,IAAIS,EAAW7D,KAAKmD,YAAYW,kBAChC,QAAiBC,IAAbF,EACF,OAAQA,EAASjB,UACf,IAAK,MACH,GAAIiB,EAASf,UAAUpC,OAAS,EAC9B,IAAK,IAAIO,EAAI,EAAGA,EAAI4C,EAASf,UAAUpC,OAAQO,IAC7CjB,KAAKkD,aAAazC,IAAI,CACpB1B,IAAK8E,EAAShB,UACd7D,OAAQ6E,EAASf,UAAU7B,GAC3BvB,MAAOmE,EAASnE,MAChBoC,UAAW,OACXjB,OAAO,IAIbb,KAAKkD,aAAaS,MAChB3D,KAAKmD,YAAY1C,IAAIoD,EAAShB,UAAWgB,EAASf,UAAU,GAAIe,EAASnE,QAE3EM,KAAKkD,aAAazC,IAChBT,KAAKiD,UAAUxC,IAAIoD,EAAShB,UAAWgB,EAASf,UAAU,GAAIe,EAASnE,MAAQ,IAEjF,MACF,IAAK,SACH,GAAImE,EAASf,UAAUpC,OAAS,EAC9B,IAAK,IAAIO,EAAI,EAAGA,EAAI4C,EAASf,UAAUpC,OAAQO,IAC7CjB,KAAKkD,aAAazC,IAAI,CACpB1B,IAAK8E,EAASf,UAAU7B,GACxBjC,OAAQ6E,EAAShB,UACjBnD,MAAOmE,EAASnE,MAChBoC,UAAW,OACXjB,OAAO,IAIbb,KAAKkD,aAAaS,MAChB3D,KAAKmD,YAAY1C,IAAIoD,EAASf,UAAU,GAAIe,EAAShB,UAAWgB,EAASnE,QAE3EM,KAAKkD,aAAazC,IAChBT,KAAKiD,UAAUxC,IAAIoD,EAASf,UAAU,GAAIe,EAAShB,UAAWgB,EAASnE,MAAQ,IAEjF,MACF,IAAK,QACH,GAAImE,EAASf,UAAUpC,OAAS,EAC9B,IAAK,IAAIO,EAAI,EAAGA,EAAI4C,EAASf,UAAUpC,OAAQO,IAC7CjB,KAAKkD,aAAazC,IAAI,CACpB1B,IAAKiF,EAAuBH,EAAShB,UAAWgB,EAASf,UAAU7B,IACnEjC,OAAQgF,EAA0BH,EAAShB,UAAWgB,EAASf,UAAU7B,IACzEvB,MAAOmE,EAASnE,MAChBoC,UAAW,OACXjB,OAAO,IAIbb,KAAKkD,aAAaS,MAChB3D,KAAKmD,YAAY1C,IACfuD,EAAuBH,EAAShB,UAAWgB,EAASf,UAAU,IAC9DkB,EAA0BH,EAAShB,UAAWgB,EAASf,UAAU,IACjEe,EAASnE,QAGbM,KAAKkD,aAAazC,IAChBT,KAAKiD,UAAUxC,IACbuD,EAAuBH,EAAShB,UAAWgB,EAASf,UAAU,IAC9DkB,EAA0BH,EAAShB,UAAWgB,EAASf,UAAU,IACjEe,EAASnE,MAAQ,IAGrB,MACF,QACE,MAAMuE,MAAM,0DAGe,MAA3BjE,KAAKiD,UAAU9B,QACjBnB,KAAKoD,OAAS,SAEdpD,KAAKoD,OAAS,eAGb,CACL,KAAIpD,KAAKkD,aAAaxC,SAAW,GAqB/B,OADAV,KAAKoD,OAAS,aACP,kDApBP,IAAIc,EAASlE,KAAKkD,aAAaiB,MAC/B,IAAqB,IAAjBD,EAAOrD,MACgB,SAArBqD,EAAOpC,UACT9B,KAAKiD,UAAUb,OAAO8B,EAAOnF,IAAKmF,EAAOlF,QAEzCgB,KAAKmD,YAAYf,OAAO8B,EAAOnF,IAAKmF,EAAOlF,OAAQkF,EAAOxE,YAQ5D,GALAM,KAAKkD,aAAaS,MAAM3D,KAAKmD,YAAY1C,IAAIyD,EAAOnF,IAAKmF,EAAOlF,OAAQkF,EAAOxE,QAC/EM,KAAKkD,aAAazC,IAAIT,KAAKiD,UAAUxC,IAAIyD,EAAOnF,IAAKmF,EAAOlF,OAAQkF,EAAOxE,MAAQ,IACnFM,KAAKqD,YACLe,QAAQC,IAAIrE,KAAKqD,WACjBrD,KAAKoD,OAAS,UACVpD,KAAKqD,UAAY,IAEnB,OADAe,QAAQC,IAAI,yBACL,iDAUjB,OAAOrE,KAAKiD,UAAU1B,eAxI1ByB,EAAA,GCFMsB,EAAe,CACnBtD,MAAOuD,YAAK,CACVA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtCA,YAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAExCC,QAASC,YAAI,CACX1F,IAAK2F,YAAI,IACT1F,OAAQ0F,YAAI,IACZjG,MAAOiG,YAAI,MAEbC,SAAS,EACTC,aAAc,IAkMDC,EA7Lf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAxE,EAAAT,OAAAC,EAAA,EAAAD,CAAAE,KAAA6E,GAAA,QAAAG,EAAAC,UAAAvE,OAAAwE,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAA7E,EAAAT,OAAA4B,EAAA,EAAA5B,CAAAE,MAAA+E,EAAAjF,OAAA6B,EAAA,EAAA7B,CAAA+E,IAAAjD,KAAAyD,MAAAN,EAAA,CAAA/E,MAAAsF,OAAAJ,MACWK,MAAejB,EAD1B/D,EAAA,OAAAT,OAAA+B,EAAA,EAAA/B,CAAA+E,EAAAC,GAAAhF,OAAAI,EAAA,EAAAJ,CAAA+E,EAAA,EAAA1E,IAAA,eAAAT,MAAA,SAGe8F,EAA4CzG,EAAaC,GAAgB,IAKhFwE,EALgFiC,EAAAzF,KAI9E0F,EAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG/DlC,EADEgC,EAAMG,OAAOjG,MAAMkG,OAAO,GACjBF,EAAgBhC,SAAS8B,EAAMG,OAAOjG,MAAMkG,OAAO,IAC1DJ,EAAMG,OAAOjG,MAAMkG,OAAO,GAC1B,GAEOF,EAAgBhC,SAAS8B,EAAMG,OAAOjG,MAAMkG,OAAO,IAC1DJ,EAAMG,OAAOjG,MAAMkG,OAAO,GAC1B,GAMN5F,KAAK6F,SACH,SAAAC,GAAe,IAAZ9E,EAAY8E,EAAZ9E,MACD,MAAO,CACLA,MAAOA,EAAM+E,IAAIhH,EAAKiC,EAAMmD,IAAIpF,GAAKgH,IAAI/G,EAAQwE,MAGrD,WACEiC,EAAKO,uBA7Bb,CAAA7F,IAAA,eAAAT,MAAA,SAkCe8F,GACXA,EAAMS,iBACN,IACMC,GADS,IAAIlD,GACGmD,MAAMnG,KAAKuF,MAAMvE,MAAMoF,QACvB,kBAAXF,EACTlG,KAAK6F,SAAS,CAAEjB,aAAcsB,IAE9BlG,KAAK6F,SAAS,CACZ7E,MAAOqF,YAAOH,OA1CtB,CAAA/F,IAAA,mBAAAT,MAAA,WA+C2B,IAAA4G,EAAAtG,KAEvBA,KAAK6F,SAAS,CACZrB,QAAS6B,YAAO/B,EAAaE,SAC7BG,SAAS,EACTC,aAAc,KAMd,IADA,IAAI2B,EAAY,EACPxH,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAK,IAAIC,EAAS,EAAGA,EAAS,EAAGA,IACe,KAA1CgB,KAAKuF,MAAMvE,MAAMmD,IAAIpF,GAAKoF,IAAInF,IAChCuH,IAIFA,EAAY,IACdvG,KAAK6F,SAAS,CACZlB,SAAS,EACTC,aAAc,kCAMpB,IA3BuB,IAAA4B,EAAA,SA2BdzH,GAEP,IADA,IAAIwE,EAAS+C,EAAKf,MAAMvE,MAAMmD,IAAIpF,GAAKqH,OAC9BpH,EAAS,EAAGA,EAAS,EAAGA,IACR,KAAnBuE,EAAOvE,IACLuE,EAAOkD,QAAQlD,EAAOvE,MAAaA,GACrCsH,EAAKT,SAAS,SAAAa,GAAiB,IAAdlC,EAAckC,EAAdlC,QACf,MAAO,CACLA,QAASA,EAAQuB,IAAI,MAAOvB,EAAQL,IAAI,OAAO1D,IAAI1B,IACnD4F,SAAS,MARZ5F,EAAM,EAAGA,EAAM,EAAGA,IAAOyH,EAAzBzH,GAiBT,IA5CuB,IAAA4H,EAAA,SA4Cd3H,GAEP,IADA,IAAI4H,EAAsB,GACjB7H,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChC,IAAI8H,EAAYP,EAAKf,MAAMvE,MAAMmD,IAAIpF,GAAKoF,IAAInF,GAC5B,KAAd6H,KACoC,IAAlCD,EAAUlD,SAASmD,GACrBD,EAAUvG,KAAKwG,GAEfP,EAAKT,SAAS,SAAAiB,GAAiB,IAAdtC,EAAcsC,EAAdtC,QACf,MAAO,CACLA,QAASA,EAAQuB,IAAI,SAAUvB,EAAQL,IAAI,UAAU1D,IAAIzB,IACzD2F,SAAS,QAXZ3F,EAAS,EAAGA,EAAS,EAAGA,IAAU2H,EAAlC3H,GAoBT,IAhEuB,IAAA+H,EAAA,SAgEdtI,GAEP,IADA,IAAIuI,EAAqB,GAChBtI,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAC/C,IAAIK,EAAMoD,EAAwB1D,EAAOC,GACrCM,EAASmD,EAA2B1D,EAAOC,GAC3CmI,EAAYP,EAAKf,MAAMvE,MAAMmD,IAAIpF,GAAKoF,IAAInF,GAC5B,KAAd6H,KACmC,IAAjCG,EAAStD,SAASmD,GACpBG,EAAS3G,KAAKwG,GAEdP,EAAKT,SAAS,SAAAoB,GAAiB,IAAdzC,EAAcyC,EAAdzC,QACf,MAAO,CACLA,QAASA,EAAQuB,IAAI,QAASvB,EAAQL,IAAI,SAAS1D,IAAIhC,IACvDkG,SAAS,QAbZlG,EAAQ,EAAGA,EAAQ,EAAGA,IAASsI,EAA/BtI,KA/Gb,CAAA0B,IAAA,cAAAT,MAAA,SAsIcX,EAAaC,GACvB,OACGgB,KAAKuF,MAAMf,QAAQL,IAAI,OAAOT,SAAS3E,KACvCiB,KAAKuF,MAAMf,QAAQL,IAAI,UAAUT,SAAS1E,KAC1CgB,KAAKuF,MAAMf,QAAQL,IAAI,SAAST,SAASvB,EAA6BpD,EAAKC,MA1IlF,CAAAmB,IAAA,cAAAT,MAAA,SA+Ic8F,GACVA,EAAMS,iBACNjG,KAAK6F,SAAS,CACZ7E,MAAOqF,YAAO/B,EAAatD,WAlJjC,CAAAb,IAAA,SAAAT,MAAA,WAsJW,IAAAwH,EAAAlH,KACP,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,4BACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAQ0H,SAAU,SAAAC,GAAC,OAAIF,EAAKG,aAAaD,KACtDpH,KAAKuF,MAAMvE,MAAMsG,IAAI,SAACvI,EAAKwI,GAC1B,OACElI,EAAAC,EAAAC,cAAA,OAAKY,IAAKoH,EAAW9H,UAAU,OAC5BV,EAAIuI,IAAI,SAAC5H,EAAO8H,GACf,OACEnI,EAAAC,EAAAC,cAAC6B,EAAD,CACEjB,IAAKoH,EAAY,IAAMC,EACvBzI,IAAKwI,EACLvI,OAAQwI,EACR9H,MAAOA,EACPN,MAAO8H,EAAKO,YAAYF,EAAWC,GACnC5H,SAAU,SAAAwH,GAAC,OAAIF,EAAKQ,aAAaN,EAAGG,EAAWC,WAO3DnI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASO,KAAKuF,MAAMX,cACnCvF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASD,KAAK,SAASmI,UAAW3H,KAAKuF,MAAMZ,SAA/D,SAGAtF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASmI,QAAS,SAAApC,GAAK,OAAI0B,EAAKW,YAAYrC,KAA9D,WAKJnG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,kCAAwDJ,EAAAC,EAAAC,cAAA,KAAGuI,KAAK,+CAAR,qBAvLhEjD,EAAA,CAAgCkD,IAAMC,WCpBvBC,EAJO,WACpB,OAAO5I,EAAAC,EAAAC,cAACyB,EAAD,OCMWkH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4decb8a0.chunk.js","sourcesContent":["export function blockToRow(block: number, position: number): number {\r\n  return Math.floor(block / 3) * 3 + Math.floor(position / 3)\r\n}\r\n\r\nexport function blockToColumn(block: number, position: number): number {\r\n  return (block % 3) * 3 + (position % 3)\r\n}\r\n\r\nexport function positionToBlock(row: number, column: number): number {\r\n  return Math.floor(row / 3) * 3 + Math.floor(column / 3)\r\n}\r\n\r\nexport function positionToBlockPosition(row: number, column: number): number {\r\n  return (row % 3) * 3 + (column % 3)\r\n}\r\n","import React from 'react'\r\n\r\ntype ChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void\r\n\r\ninterface CellProps {\r\n  row: number\r\n  column: number\r\n  value: string\r\n  valid: boolean\r\n  onchange: ChangeHandler\r\n}\r\n\r\nexport const Cell: React.FunctionComponent<CellProps> = props => {\r\n  // Builds the class list based off of position on board and whether it's valid\r\n  const classList: string =\r\n    'cell' +\r\n    (props.column === 2 || props.column === 5 ? ' section-wall' : '') +\r\n    (props.row === 2 || props.row === 5 ? ' section-floor' : '') +\r\n    (!props.valid ? ' invalid' : '')\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className={classList}\r\n      value={props.value}\r\n      onChange={props.onchange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","/*\r\n * The board history keeps an array of actions to undo changes made by the\r\n * solver when a branch is found to be unsolvabled. If the history array is\r\n * exhausted, the entire board is determined to be unsolvable.\r\n */\r\n\r\ntype BoardType = 'main' | 'possibility'\r\n\r\nexport interface HistoryItem {\r\n  row: number\r\n  column: number\r\n  value: number\r\n  boardType: BoardType\r\n  ghost: boolean\r\n}\r\n\r\nexport class BoardHistory {\r\n  private history: HistoryItem[]\r\n\r\n  constructor() {\r\n    this.history = []\r\n  }\r\n\r\n  // Adds a single item to the history array.\r\n  public add(item: HistoryItem) {\r\n    this.history.push(item)\r\n  }\r\n\r\n  // Adds a list of history items to the history array.\r\n  public merge(historyItems: HistoryItem[]) {\r\n    historyItems.forEach(item => this.add(item))\r\n  }\r\n\r\n  // Returns the number of items in the history queue\r\n  public length(): number {\r\n    return this.history.length\r\n  }\r\n\r\n  // Returns the most recent item or undefined if array exhausted.\r\n  public get(): HistoryItem | undefined {\r\n    return this.history.pop()\r\n  }\r\n\r\n  public ghostCount(): number {\r\n    return this.history.filter(item => {\r\n      return item.ghost === true\r\n    }).length\r\n  }\r\n}\r\n","import { HistoryItem } from './BoardHistory'\r\n\r\nabstract class Board {\r\n  public board: number[][]\r\n\r\n  constructor(fill: number) {\r\n    this.board = []\r\n    for (let i = 0; i < 9; i++) {\r\n      this.board.push([])\r\n      for (let j = 0; j < 9; j++) {\r\n        this.board[i].push(fill)\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract add(row: number, column: number, value?: number): void\r\n  abstract remove(row: number, column: number): void\r\n\r\n  public score(): number {\r\n    let score = 0\r\n    this.board.forEach(row => {\r\n      row.forEach(cell => {\r\n        score += cell\r\n      })\r\n    })\r\n\r\n    return score\r\n  }\r\n\r\n  public print(): string {\r\n    let result = ''\r\n    this.board.forEach(row => {\r\n      result += row.join('') + '\\n'\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  public toString(): string[][] {\r\n    const result = []\r\n    for (let row = 0; row < 9; row++) {\r\n      result.push([])\r\n      for (let column = 0; column < 9; column++) {\r\n        result[row].push(this.board[row][column].toString())\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n\r\nexport class SudokuBoard extends Board {\r\n  constructor() {\r\n    super(0)\r\n  }\r\n\r\n  // Sets cell to provided number and returns a function to undo this action\r\n  public add(row: number, column: number, value: number): HistoryItem {\r\n    if (this.board[row][column] === 0) {\r\n      this.board[row][column] = value\r\n      return {\r\n        row: row,\r\n        column: column,\r\n        value: value,\r\n        boardType: 'main',\r\n        ghost: false,\r\n      }\r\n    }\r\n  }\r\n\r\n  //  Sets cell back to zero.\r\n  public remove(row: number, column: number): void {\r\n    this.board[row][column] = 0\r\n  }\r\n}\r\n\r\nexport class PossibilityBoard extends Board {\r\n  constructor() {\r\n    super(1)\r\n  }\r\n\r\n  // Sets cell as unusable and returns a function to undo this action.\r\n  public add(row: number, column: number, value: number): HistoryItem | undefined {\r\n    if (this.board[row][column] === 1) {\r\n      this.board[row][column] = 0\r\n      return {\r\n        row: row,\r\n        column: column,\r\n        value: value,\r\n        boardType: 'possibility',\r\n        ghost: false,\r\n      }\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  // Sets the cell back to usable.\r\n  public remove(row: number, column: number): void {\r\n    this.board[row][column] = 1\r\n  }\r\n}\r\n","import { PossibilityBoard } from './Board'\r\nimport { HistoryItem } from './BoardHistory'\r\nimport * as BlockHelpers from '../utils/blockHelpers'\r\n\r\nexport type BoardUnit = 'row' | 'column' | 'block'\r\n\r\nexport interface SolvableItem {\r\n  value: number\r\n  unitType: BoardUnit\r\n  unitValue: number\r\n  solutions: number[]\r\n}\r\n\r\nexport class SolveMatrix {\r\n  public matrix: PossibilityBoard[]\r\n\r\n  constructor() {\r\n    this.matrix = []\r\n    for (let i = 0; i < 9; i++) {\r\n      this.matrix.push(new PossibilityBoard())\r\n    }\r\n  }\r\n\r\n  public add(row: number, column: number, value: number): HistoryItem[] {\r\n    const history: HistoryItem[] = []\r\n    const block = BlockHelpers.positionToBlock(row, column)\r\n\r\n    let result: HistoryItem | undefined\r\n\r\n    // Sets cells in possibility boards as unusable\r\n    for (let i = 0; i < 9; i++) {\r\n      result = this.matrix[i].add(row, column, i)\r\n      result && history.push(result)\r\n\r\n      result = this.matrix[value].add(row, i, value)\r\n      result && history.push(result)\r\n\r\n      result = this.matrix[value].add(i, column, value)\r\n      result && history.push(result)\r\n\r\n      result = this.matrix[value].add(\r\n        BlockHelpers.blockToRow(block, i),\r\n        BlockHelpers.blockToColumn(block, i),\r\n        value\r\n      )\r\n      result && history.push(result)\r\n    }\r\n\r\n    return history\r\n  }\r\n\r\n  public remove(row: number, column: number, value: number) {\r\n    this.matrix[value].remove(row, column)\r\n  }\r\n\r\n  public getSolvableItem(): SolvableItem | undefined {\r\n    const boardTypes: BoardUnit[] = ['row', 'column', 'block']\r\n    let row: number, column: number\r\n    for (let maxSolutions = 1; maxSolutions < 4; maxSolutions++) {\r\n      for (let boardNumber = 0; boardNumber < 9; boardNumber++) {\r\n        for (let iType = 0; iType < 3; iType++) {\r\n          let type: BoardUnit = boardTypes[iType]\r\n          for (let iOuter = 0; iOuter < 9; iOuter++) {\r\n            let hits: number[] = []\r\n            for (let iInner = 0; iInner < 9; iInner++) {\r\n              switch (type) {\r\n                case 'row':\r\n                  row = iOuter\r\n                  column = iInner\r\n                  break\r\n                case 'column':\r\n                  row = iInner\r\n                  column = iOuter\r\n                  break\r\n                case 'block':\r\n                  row = BlockHelpers.blockToRow(iOuter, iInner)\r\n                  column = BlockHelpers.blockToColumn(iOuter, iInner)\r\n              }\r\n\r\n              if (this.matrix[boardNumber].board[row][column] === 1) {\r\n                hits.push(iInner)\r\n                if (hits.length > maxSolutions) {\r\n                  break\r\n                }\r\n              }\r\n            }\r\n\r\n            if (hits.length === maxSolutions) {\r\n              return {\r\n                value: boardNumber,\r\n                unitType: type,\r\n                unitValue: iOuter,\r\n                solutions: hits,\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // If no solutions were found, return undefined\r\n    return undefined\r\n  }\r\n}\r\n","import { BoardHistory } from './BoardHistory'\r\nimport { SudokuBoard } from './Board'\r\nimport { SolveMatrix } from './SolveMatrix'\r\nimport * as BlockHelper from '../utils/blockHelpers'\r\n\r\ntype StatusType = 'forward' | 'backward' | 'solveCheck' | 'solved' | 'unsolvable'\r\nconst validCell = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nexport class SudokuSolver {\r\n  private mainBoard: SudokuBoard\r\n  private boardHistory: BoardHistory\r\n  private solveMatrix: SolveMatrix\r\n  private status: StatusType\r\n  private totalRuns: number\r\n\r\n  constructor() {\r\n    this.mainBoard = new SudokuBoard()\r\n    this.boardHistory = new BoardHistory()\r\n    this.solveMatrix = new SolveMatrix()\r\n    this.status = 'forward'\r\n    this.totalRuns = 0\r\n  }\r\n\r\n  private populateBoard(input: string[][]): void {\r\n    input.forEach((rowArr, row) => {\r\n      rowArr.forEach((value, column) => {\r\n        let newValue: number = parseInt(value)\r\n        if (validCell.includes(newValue)) {\r\n          this.boardHistory.merge(this.solveMatrix.add(row, column, newValue - 1))\r\n          this.boardHistory.add(this.mainBoard.add(row, column, newValue))\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  public solve(input: string[][]): string[][] | string {\r\n    this.populateBoard(input)\r\n    while (this.status === 'forward' || this.status === 'backward') {\r\n      if (this.status === 'forward') {\r\n        let nextItem = this.solveMatrix.getSolvableItem()\r\n        if (nextItem !== undefined) {\r\n          switch (nextItem.unitType) {\r\n            case 'row':\r\n              if (nextItem.solutions.length > 1) {\r\n                for (let i = 1; i < nextItem.solutions.length; i++) {\r\n                  this.boardHistory.add({\r\n                    row: nextItem.unitValue,\r\n                    column: nextItem.solutions[i],\r\n                    value: nextItem.value,\r\n                    boardType: 'main',\r\n                    ghost: true,\r\n                  })\r\n                }\r\n              }\r\n              this.boardHistory.merge(\r\n                this.solveMatrix.add(nextItem.unitValue, nextItem.solutions[0], nextItem.value)\r\n              )\r\n              this.boardHistory.add(\r\n                this.mainBoard.add(nextItem.unitValue, nextItem.solutions[0], nextItem.value + 1)\r\n              )\r\n              break\r\n            case 'column':\r\n              if (nextItem.solutions.length > 1) {\r\n                for (let i = 1; i < nextItem.solutions.length; i++) {\r\n                  this.boardHistory.add({\r\n                    row: nextItem.solutions[i],\r\n                    column: nextItem.unitValue,\r\n                    value: nextItem.value,\r\n                    boardType: 'main',\r\n                    ghost: true,\r\n                  })\r\n                }\r\n              }\r\n              this.boardHistory.merge(\r\n                this.solveMatrix.add(nextItem.solutions[0], nextItem.unitValue, nextItem.value)\r\n              )\r\n              this.boardHistory.add(\r\n                this.mainBoard.add(nextItem.solutions[0], nextItem.unitValue, nextItem.value + 1)\r\n              )\r\n              break\r\n            case 'block':\r\n              if (nextItem.solutions.length > 1) {\r\n                for (let i = 0; i < nextItem.solutions.length; i++) {\r\n                  this.boardHistory.add({\r\n                    row: BlockHelper.blockToRow(nextItem.unitValue, nextItem.solutions[i]),\r\n                    column: BlockHelper.blockToColumn(nextItem.unitValue, nextItem.solutions[i]),\r\n                    value: nextItem.value,\r\n                    boardType: 'main',\r\n                    ghost: true,\r\n                  })\r\n                }\r\n              }\r\n              this.boardHistory.merge(\r\n                this.solveMatrix.add(\r\n                  BlockHelper.blockToRow(nextItem.unitValue, nextItem.solutions[0]),\r\n                  BlockHelper.blockToColumn(nextItem.unitValue, nextItem.solutions[0]),\r\n                  nextItem.value\r\n                )\r\n              )\r\n              this.boardHistory.add(\r\n                this.mainBoard.add(\r\n                  BlockHelper.blockToRow(nextItem.unitValue, nextItem.solutions[0]),\r\n                  BlockHelper.blockToColumn(nextItem.unitValue, nextItem.solutions[0]),\r\n                  nextItem.value + 1\r\n                )\r\n              )\r\n              break\r\n            default:\r\n              throw Error('Return type of SolveMatrix is not a solvable type')\r\n          }\r\n        } else {\r\n          if (this.mainBoard.score() === 405) {\r\n            this.status = 'solved'\r\n          } else {\r\n            this.status = 'backward'\r\n          }\r\n        }\r\n      } else {\r\n        if (this.boardHistory.length() > 0) {\r\n          let action = this.boardHistory.get()\r\n          if (action.ghost === false) {\r\n            if (action.boardType === 'main') {\r\n              this.mainBoard.remove(action.row, action.column)\r\n            } else {\r\n              this.solveMatrix.remove(action.row, action.column, action.value)\r\n            }\r\n          } else {\r\n            this.boardHistory.merge(this.solveMatrix.add(action.row, action.column, action.value))\r\n            this.boardHistory.add(this.mainBoard.add(action.row, action.column, action.value + 1))\r\n            this.totalRuns++\r\n            console.log(this.totalRuns)\r\n            this.status = 'forward'\r\n            if (this.totalRuns > 1000) {\r\n              console.log('setting to unsolvable')\r\n              return 'Looked into infinity and didn\\'t see an answer.'\r\n            }\r\n          }\r\n        } else {\r\n          this.status = 'unsolvable'\r\n          return 'We submitted the puzzle and the solver said no.'\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.mainBoard.toString()\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { List, Map, Set, fromJS } from 'immutable'\r\nimport * as BlockHelpers from '../utils/blockHelpers'\r\nimport Cell from './cell'\r\nimport { SudokuSolver } from '../SudokuSolver/SudokuSolver'\r\n\r\nconst initialState = {\r\n  board: List([\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n  ]),\r\n  invalid: Map({\r\n    row: Set([]),\r\n    column: Set([]),\r\n    block: Set([]),\r\n  }),\r\n  isValid: false,\r\n  errorMessage: '',\r\n}\r\n\r\ntype State = Readonly<typeof initialState>\r\n\r\nexport class InputBoard extends React.Component<object, State> {\r\n  readonly state: State = initialState\r\n\r\n  handleChange(event: React.ChangeEvent<HTMLInputElement>, row: number, column: number) {\r\n    // Limits how inputs are handled. Typing a number in an already occupied\r\n    // cell replaces it with that number. Typing a non-number deletes what's\r\n    // in the cell\r\n    const validCharacters = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\r\n    let newValue: string\r\n    if (event.target.value.charAt(1)) {\r\n      newValue = validCharacters.includes(event.target.value.charAt(1))\r\n        ? event.target.value.charAt(1)\r\n        : ''\r\n    } else {\r\n      newValue = validCharacters.includes(event.target.value.charAt(0))\r\n        ? event.target.value.charAt(0)\r\n        : ''\r\n    }\r\n\r\n    //TODO: board.get(row) is failing TypeScript compiling with strictNullChecks\r\n    //      activated. Figure out how to set it up correctly so it can be turned\r\n    //      back on.\r\n    this.setState(\r\n      ({ board }) => {\r\n        return {\r\n          board: board.set(row, board.get(row).set(column, newValue)),\r\n        }\r\n      },\r\n      () => {\r\n        this.updateValidation()\r\n      }\r\n    )\r\n  }\r\n\r\n  handleSubmit(event: React.FormEvent): void {\r\n    event.preventDefault()\r\n    const solver = new SudokuSolver()\r\n    const solved = solver.solve(this.state.board.toJS())\r\n    if (typeof solved === 'string') {\r\n      this.setState({ errorMessage: solved })\r\n    } else {\r\n      this.setState({\r\n        board: fromJS(solved),\r\n      })\r\n    }\r\n  }\r\n\r\n  updateValidation(): void {\r\n    // Resets the invalid rows, columns and blocks for revalidation\r\n    this.setState({\r\n      invalid: fromJS(initialState.invalid),\r\n      isValid: true,\r\n      errorMessage: '',\r\n    })\r\n\r\n    // 17 Clue Validation - This makes sure there are at least 17 clues\r\n    {\r\n      let clueTotal = 0\r\n      for (let row = 0; row < 9; row++) {\r\n        for (let column = 0; column < 9; column++) {\r\n          if (this.state.board.get(row).get(column) !== '') {\r\n            clueTotal++\r\n          }\r\n        }\r\n      }\r\n      if (clueTotal < 17) {\r\n        this.setState({\r\n          isValid: false,\r\n          errorMessage: 'Board needs at least 17 clues',\r\n        })\r\n      }\r\n    }\r\n\r\n    // Row validation.\r\n    for (let row = 0; row < 9; row++) {\r\n      let rowArr = this.state.board.get(row).toJS()\r\n      for (let column = 0; column < 9; column++) {\r\n        if (rowArr[column] !== '') {\r\n          if (rowArr.indexOf(rowArr[column]) !== column) {\r\n            this.setState(({ invalid }) => {\r\n              return {\r\n                invalid: invalid.set('row', invalid.get('row').add(row)),\r\n                isValid: false,\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Column validation.\r\n    for (let column = 0; column < 9; column++) {\r\n      let columnArr: string[] = []\r\n      for (let row = 0; row < 9; row++) {\r\n        let testValue = this.state.board.get(row).get(column)\r\n        if (testValue !== '') {\r\n          if (columnArr.includes(testValue) === false) {\r\n            columnArr.push(testValue)\r\n          } else {\r\n            this.setState(({ invalid }) => {\r\n              return {\r\n                invalid: invalid.set('column', invalid.get('column').add(column)),\r\n                isValid: false,\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Block validation.\r\n    for (let block = 0; block < 9; block++) {\r\n      let blockArr: string[] = []\r\n      for (let position = 0; position < 9; position++) {\r\n        let row = BlockHelpers.blockToRow(block, position)\r\n        let column = BlockHelpers.blockToColumn(block, position)\r\n        let testValue = this.state.board.get(row).get(column)\r\n        if (testValue !== '') {\r\n          if (blockArr.includes(testValue) === false) {\r\n            blockArr.push(testValue)\r\n          } else {\r\n            this.setState(({ invalid }) => {\r\n              return {\r\n                invalid: invalid.set('block', invalid.get('block').add(block)),\r\n                isValid: false,\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Returns whether the cell is valid\r\n  isCellValid(row: number, column: number): boolean {\r\n    return (\r\n      !this.state.invalid.get('row').includes(row) &&\r\n      !this.state.invalid.get('column').includes(column) &&\r\n      !this.state.invalid.get('block').includes(BlockHelpers.positionToBlock(row, column))\r\n    )\r\n  }\r\n\r\n  //Clears the board\r\n  handleClear(event: React.MouseEvent): void {\r\n    event.preventDefault()\r\n    this.setState({\r\n      board: fromJS(initialState.board),\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-container\">\r\n        <h1 className=\"title\">TypeScript Sudoku Solver</h1>\r\n        <form className=\"board\" onSubmit={e => this.handleSubmit(e)}>\r\n          {this.state.board.map((row, rowNumber) => {\r\n            return (\r\n              <div key={rowNumber} className=\"row\">\r\n                {row.map((value, columnNumber) => {\r\n                  return (\r\n                    <Cell\r\n                      key={rowNumber + '-' + columnNumber}\r\n                      row={rowNumber}\r\n                      column={columnNumber}\r\n                      value={value}\r\n                      valid={this.isCellValid(rowNumber, columnNumber)}\r\n                      onchange={e => this.handleChange(e, rowNumber, columnNumber)}\r\n                    />\r\n                  )\r\n                })}\r\n              </div>\r\n            )\r\n          })}\r\n          <div className=\"error\">{this.state.errorMessage}</div>\r\n          <div className=\"button-container\">\r\n            <button className=\"button\" type=\"submit\" disabled={!this.state.isValid}>\r\n              Solve\r\n            </button>\r\n            <button className=\"button\" onClick={event => this.handleClear(event)}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className=\"details\">Find out how this works at the <a href=\"https://github.com/arromeo/ts-sudoku-solver\">Github Repo</a></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InputBoard\r\n","import React from 'react'\nimport './App.css'\n\nimport InputBoard from './components/board'\n\nconst App: React.FC = () => {\n  return <InputBoard />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}