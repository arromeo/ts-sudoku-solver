{"version":3,"sources":["utils/blockHelpers.ts","components/cell.tsx","components/board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blockToRow","block","position","Math","floor","blockToColumn","Cell","props","classList","column","row","valid","react_default","a","createElement","type","className","value","onChange","onchange","initialState","board","List","invalid","Map","Set","InputBoard","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","inherits","createClass","key","event","newValue","_this2","validCharacters","target","charAt","includes","setState","_ref","set","get","updateValidation","_this3","fromJS","_loop","rowArr","toJS","indexOf","_ref2","add","console","log","_loop2","columnArr","testValue","push","_ref3","_loop3","blockArr","BlockHelpers","_ref4","_this4","map","rowNumber","columnNumber","cell","isCellValid","e","handleChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90406b8a.chunk.js","sourcesContent":["export function blockToRow(block: number, position: number): number {\r\n  return Math.floor(block / 3) * 3 + Math.floor(position / 3)\r\n}\r\n\r\nexport function blockToColumn(block: number, position: number): number {\r\n  return (block % 3) * 3 + (position % 3)\r\n}\r\n\r\nexport function positionToBlock(row: number, column: number): number {\r\n  return Math.floor(row / 3) * 3 + Math.floor(column / 3)\r\n}\r\n\r\nexport function positionToBlockPosition(row: number, column: number): number {\r\n  return (row % 3) * 3 + (column % 3)\r\n}\r\n","import React from 'react'\r\n\r\ntype ChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void\r\n\r\ninterface CellProps {\r\n  row: number\r\n  column: number\r\n  value: string\r\n  valid: boolean\r\n  onchange: ChangeHandler\r\n}\r\n\r\nexport const Cell: React.FunctionComponent<CellProps> = props => {\r\n  // Builds the class list based off of position on board and whether it's valid\r\n  const classList: string =\r\n    'cell' +\r\n    (props.column === 2 || props.column === 5 ? ' section-wall' : '') +\r\n    (props.row === 2 || props.row === 5 ? ' section-floor' : '') +\r\n    (!props.valid ? ' invalid' : '')\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className={classList}\r\n      value={props.value}\r\n      onChange={props.onchange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react'\r\nimport { List, Map, Set, fromJS } from 'immutable'\r\nimport * as BlockHelpers from '../utils/blockHelpers'\r\nimport Cell from './cell'\r\n\r\nconst initialState = {\r\n  board: List([\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n    List(['', '', '', '', '', '', '', '', '']),\r\n  ]),\r\n  invalid: Map({\r\n    row: Set([]),\r\n    column: Set([]),\r\n    block: Set([]),\r\n  }),\r\n}\r\n\r\ntype State = Readonly<typeof initialState>\r\n\r\nexport class InputBoard extends React.Component<object, State> {\r\n  readonly state: State = initialState\r\n\r\n  handleChange(\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n    row: number,\r\n    column: number\r\n  ) {\r\n    // Limits how inputs are handled. Typing a number in an already occupied\r\n    // cell replaces it with that number. Typing a non-number deletes what's\r\n    // in the cell\r\n    const validCharacters = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\r\n    let newValue: string\r\n    if (event.target.value.charAt(1)) {\r\n      newValue = validCharacters.includes(event.target.value.charAt(1))\r\n        ? event.target.value.charAt(1)\r\n        : ''\r\n    } else {\r\n      newValue = validCharacters.includes(event.target.value.charAt(0))\r\n        ? event.target.value.charAt(0)\r\n        : ''\r\n    }\r\n\r\n    //TODO: board.get(row) is failing TypeScript compiling with strictNullChecks\r\n    //      activated. Figure out how to set it up correctly so it can be turned\r\n    //      back on.\r\n    this.setState(\r\n      ({ board }) => {\r\n        return {\r\n          board: board.set(row, board.get(row).set(column, newValue)),\r\n        }\r\n      },\r\n      () => {\r\n        this.updateValidation()\r\n      }\r\n    )\r\n  }\r\n\r\n  updateValidation() {\r\n    // Resets the invalid rows, columns and blocks for revalidation\r\n    this.setState({\r\n      invalid: fromJS(initialState.invalid),\r\n    })\r\n\r\n    // Row validation.\r\n    for (let row = 0; row < 9; row++) {\r\n      let rowArr = this.state.board.get(row).toJS()\r\n      for (let column = 0; column < 9; column++) {\r\n        if (rowArr[column] !== '') {\r\n          if (rowArr.indexOf(rowArr[column]) !== column) {\r\n            this.setState(\r\n              ({ invalid }) => {\r\n                return {\r\n                  invalid: invalid.set('row', invalid.get('row').add(row)),\r\n                }\r\n              },\r\n              () => {\r\n                console.log(this.state.invalid.get('row').toJS())\r\n              }\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Column validation.\r\n    for (let column = 0; column < 9; column++) {\r\n      let columnArr: string[] = []\r\n      for (let row = 0; row < 9; row++) {\r\n        let testValue = this.state.board.get(row).get(column)\r\n        if (testValue !== '') {\r\n          if (columnArr.includes(testValue) === false) {\r\n            columnArr.push(testValue)\r\n          } else {\r\n            this.setState(\r\n              ({ invalid }) => {\r\n                return {\r\n                  invalid: invalid.set(\r\n                    'column',\r\n                    invalid.get('column').add(column)\r\n                  ),\r\n                }\r\n              },\r\n              () => {\r\n                console.log(this.state.invalid.get('column').toJS())\r\n              }\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Block validation.\r\n    for (let block = 0; block < 9; block++) {\r\n      let blockArr: string[] = []\r\n      for (let position = 0; position < 9; position++) {\r\n        let row = BlockHelpers.blockToRow(block, position)\r\n        let column = BlockHelpers.blockToColumn(block, position)\r\n        let testValue = this.state.board.get(row).get(column)\r\n        if (testValue !== '') {\r\n          if (blockArr.includes(testValue) === false) {\r\n            blockArr.push(testValue)\r\n          } else {\r\n            this.setState(\r\n              ({ invalid }) => {\r\n                return {\r\n                  invalid: invalid.set(\r\n                    'block',\r\n                    invalid.get('block').add(block)\r\n                  ),\r\n                }\r\n              },\r\n              () => {\r\n                console.log(this.state.invalid.get('block').toJS())\r\n              }\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Returns whether the cell is valid\r\n  isCellValid(row: number, column: number): boolean {\r\n    return (\r\n      !this.state.invalid.get('row').includes(row) &&\r\n      !this.state.invalid.get('column').includes(column) &&\r\n      !this.state.invalid\r\n        .get('block')\r\n        .includes(BlockHelpers.positionToBlock(row, column))\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"board\">\r\n        {this.state.board.map((row, rowNumber) => {\r\n          return (\r\n            <div key={rowNumber} className=\"row\">\r\n              {row.map((value, columnNumber) => {\r\n                return (\r\n                  <Cell\r\n                    key={rowNumber + '-' + columnNumber}\r\n                    row={rowNumber}\r\n                    column={columnNumber}\r\n                    value={value}\r\n                    valid={this.isCellValid(rowNumber, columnNumber)}\r\n                    onchange={e =>\r\n                      this.handleChange(e, rowNumber, columnNumber)\r\n                    }\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          )\r\n        })}\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InputBoard\r\n","import React from 'react'\nimport './App.css'\n\nimport InputBoard from './components/board'\n\nconst App: React.FC = () => {\n  return <InputBoard />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}